# Copyright 2016 Apcera Inc. All rights reserved.

listen: 127.0.0.1:4222

debug: true

authorization {
  # Our role based permissions.

  # Superuser can do anything.
  super_user = {
    publish = "*"
    subscribe = ">"
  }
  # Can do requests on foo or bar, and subscribe to anything
  # that is a response to an _INBOX.
  #
  # Notice that authorization filters can be singletons or arrays.
  req_pub_user = {
    publish = ["req.foo", "req.bar"]
    subscribe = "_INBOX.>"
  }

  # Setup a default user that can subscribe to anything, but has
  # no publish capabilities.
  default_user = {
    subscribe = "PUBLIC.>"
  }

  # Default permissions if none presented. e.g. susan below.
  default_permissions: $default_user

  # Just for EXTERNAL permission, array[0] must be golang_type.
  # You can implement your own golang_type for customization.
  external_permission = {
    publish = ["golang_type.remote.RemotePermission", "http://127.0.0.1:9292/accessmanager/authorization/authenticate"]
    subscribe = ["golang_type.remote.RemotePermission", "http://127.0.0.1:9292/accessmanager/authorization/authenticate"]
  }

  # Just for EXTERNAL user, array[0] must be golang_type. e.g. remote.RemoteAuth below.
  # You can implement your own golang_type for customization.
  authenticate = ["golang_type.remote.RemoteAuth", "http://127.0.0.1:9292/accessmanager/authentication/authenticate"]

  # Users listed with persmissions.
  # EXTERNAL user parameter "authenticator" must be placed.
  users = [
    {user: alice, password: foo, permissions: $super_user}
    {user: bob,   password: bar, permissions: $req_pub_user}
    {user: susan, password: baz}
    {user: EXTERNAL, authenticator: $authenticate, permissions: $external_permission}
  ]

}
